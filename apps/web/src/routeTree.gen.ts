/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MealPlannerIndexRouteImport } from './routes/mealPlanner/index'
import { Route as GroupsIndexRouteImport } from './routes/groups/index'
import { Route as MealPlannerGroupIdRouteImport } from './routes/mealPlanner/$groupId'
import { Route as GroupsGroupIdRouteImport } from './routes/groups/$groupId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MealPlannerIndexRoute = MealPlannerIndexRouteImport.update({
  id: '/mealPlanner/',
  path: '/mealPlanner/',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupsIndexRoute = GroupsIndexRouteImport.update({
  id: '/groups/',
  path: '/groups/',
  getParentRoute: () => rootRouteImport,
} as any)
const MealPlannerGroupIdRoute = MealPlannerGroupIdRouteImport.update({
  id: '/mealPlanner/$groupId',
  path: '/mealPlanner/$groupId',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupsGroupIdRoute = GroupsGroupIdRouteImport.update({
  id: '/groups/$groupId',
  path: '/groups/$groupId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/groups/$groupId': typeof GroupsGroupIdRoute
  '/mealPlanner/$groupId': typeof MealPlannerGroupIdRoute
  '/groups': typeof GroupsIndexRoute
  '/mealPlanner': typeof MealPlannerIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/groups/$groupId': typeof GroupsGroupIdRoute
  '/mealPlanner/$groupId': typeof MealPlannerGroupIdRoute
  '/groups': typeof GroupsIndexRoute
  '/mealPlanner': typeof MealPlannerIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/groups/$groupId': typeof GroupsGroupIdRoute
  '/mealPlanner/$groupId': typeof MealPlannerGroupIdRoute
  '/groups/': typeof GroupsIndexRoute
  '/mealPlanner/': typeof MealPlannerIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/groups/$groupId'
    | '/mealPlanner/$groupId'
    | '/groups'
    | '/mealPlanner'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/groups/$groupId'
    | '/mealPlanner/$groupId'
    | '/groups'
    | '/mealPlanner'
  id:
    | '__root__'
    | '/'
    | '/groups/$groupId'
    | '/mealPlanner/$groupId'
    | '/groups/'
    | '/mealPlanner/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GroupsGroupIdRoute: typeof GroupsGroupIdRoute
  MealPlannerGroupIdRoute: typeof MealPlannerGroupIdRoute
  GroupsIndexRoute: typeof GroupsIndexRoute
  MealPlannerIndexRoute: typeof MealPlannerIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mealPlanner/': {
      id: '/mealPlanner/'
      path: '/mealPlanner'
      fullPath: '/mealPlanner'
      preLoaderRoute: typeof MealPlannerIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/groups/': {
      id: '/groups/'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mealPlanner/$groupId': {
      id: '/mealPlanner/$groupId'
      path: '/mealPlanner/$groupId'
      fullPath: '/mealPlanner/$groupId'
      preLoaderRoute: typeof MealPlannerGroupIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/groups/$groupId': {
      id: '/groups/$groupId'
      path: '/groups/$groupId'
      fullPath: '/groups/$groupId'
      preLoaderRoute: typeof GroupsGroupIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GroupsGroupIdRoute: GroupsGroupIdRoute,
  MealPlannerGroupIdRoute: MealPlannerGroupIdRoute,
  GroupsIndexRoute: GroupsIndexRoute,
  MealPlannerIndexRoute: MealPlannerIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
